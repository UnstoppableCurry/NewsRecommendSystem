ThisBuild / scalaVersion := "2.11.11"

ThisBuild / organization := "com.wtx.job014"

            libraryDependencies += "mysql" % "mysql-connector-java" % "8.0.15"
libraryDependencies ++= Seq(
  "org.apache.spark" %% "spark-sql" % "2.3.2" %	"provided",
            "org.apache.spark" %% "spark-mllib" % "2.3.2" 
)




assemblyMergeStrategy in assembly := {
   case PathList("org", "slf4j", xs @ _*)         => MergeStrategy.first
    case PathList(ps @ _*) if ps.last endsWith "UnusedStubClass.class" => MergeStrategy.discard
    case PathList(ps @ _*) if ps.last endsWith "package-info.class" => MergeStrategy.first
    case PathList(ps @ _*) if ps.last endsWith "FastHashMap.class" => MergeStrategy.first
    case PathList(ps @ _*) if ps.last endsWith "FastHashMap$Values.class" => MergeStrategy.first
       case PathList(ps @ _*) if ps.last endsWith "FastHashMap$KeySet.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "FastHashMap$EntrySet.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "FastHashMap$CollectionView.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "FastHashMap$CollectionView$CollectionViewIterator.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "FastHashMap$1.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BufferUnderflowException.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Buffer.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ArrayStack.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "StringLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "SqlTimestampLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "SqlTimeLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BufferUnderflowException.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "SqlDateLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ShortLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LongLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "IntegerLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "FloatLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "DoubleLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "DecimalLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "DateLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ByteLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BigIntegerLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BigDecimalLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LocaleConvertUtilsBean.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LocaleConvertUtils.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LocaleBeanUtilsBean.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LocaleBeanUtilsBean$Descriptor.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LocaleBeanUtilsBean$1.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LocaleBeanUtils.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LocaleBeanUtils$Descriptor.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BaseLocaleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "URLConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "StringConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "StringArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "SqlTimestampConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "SqlTimeConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "SqlTimeConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "SqlDateConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ShortConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ShortArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LongConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LongArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "IntegerConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "IntegerArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "FloatConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "FloatArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "FileConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "DoubleConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "DoubleArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ClassConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "CharacterConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "CharacterArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ByteConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ByteArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BooleanConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BooleanArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BigIntegerConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BigDecimalConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "AbstractArrayConverter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "WrapDynaClass.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "WrapDynaBean.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "RowSetDynaClass.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ResultSetIterator.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ResultSetDynaClass.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "PropertyUtilsBean.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "PropertyUtils.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "NestedNullException.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "MutableDynaClass.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "MethodUtils.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "MethodUtils$MethodDescriptor.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "MappedPropertyDescriptor.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LazyDynaMap.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LazyDynaClass.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "LazyDynaBean.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "JDBCDynaClass.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "DynaProperty.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "DynaClass.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "DynaBean.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Converter.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ConvertUtilsBean.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ConvertUtils.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ConversionException.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ContextClassLoaderLocal.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ConstructorUtils.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BeanUtilsBean.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BeanUtilsBean$1.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BeanUtils.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BeanAccessLanguageException.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BasicDynaClass.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "BasicDynaBean.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "MethodInvocation.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "MethodInterceptor.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Joinpoint.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Invocation.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Interceptor.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ConstructorInvocation.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "ConstructorInterceptor.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "AspectException.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Advice.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Singleton.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Scope.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Qualifier.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Provider.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Named.class" => MergeStrategy.first
              case PathList(ps @ _*) if ps.last endsWith "Inject.class" => MergeStrategy.first
          case  "git.properties"=> MergeStrategy.first
    case x =>
val oldStrategy = (assemblyMergeStrategy in assembly).value
oldStrategy(x)
}